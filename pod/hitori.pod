---
name: dps-hitori
description: Denops hitori
---

=pod

=head1 dps-hitori

=begin html

<img src="./image.gif">

=end html

Plugin similar to L<neovim-remote|https://github.com/mhinz/neovim-remote> and L<vim-singleton|https://github.com/thinca/vim-singleton> using L<denops.vim|https://github.com/vim-denops/denops.vim>.

=head1 Features X<hitori-features>

It uses L<denops.vim|https://github.com/vim-denops/denops.vim>, so it works cross-platform.
Also supports Windows.

=head1 Installation X<hitori-installation>

If you use L<folke/lazy.nvim|https://github.com/folke/lazy.nvim>.

=begin lua

{
  "yukimemi/dps-hitori",
  lazy = false,
  dependencies = {
    "vim-denops/denops.vim",
  },
}

=end lua

If you use L<yukimemi/dvpm|https://github.com/yukimemi/dvpm>.

=begin typescript

dvpm.add({ url: "yukimemi/dps-hitori" });

=end typescript

=head1 Requirements X<hitori-requirements>

=item [Deno - A modern runtime for JavaScript and TypeScript](https://deno.land/)

=item [vim-denops/denops.vim: üêú An ecosystem of Vim/Neovim which allows developers to write cross-platform plugins in Deno](https://github.com/vim-denops/denops.vim)

=head1 Usage X<hitori-usage>

No special settings are required.
By default, Start a websocket server on port 7070.

=head1 Commands X<hitori-commands>

C<:Disablehitori>                                              X<:Disablehitori>
Disable hitori.

C<:Enablehitori>                                                X<:Enablehitori>
Enable hitori.

=head1 Config X<hitori-config>

No settings are required. However, the following settings can be made if necessary.

C<g:hitori_debug>                                              X<g:hitori_debug>
Enable debug messages.
default is v:false

C<g:hitori_quit>                                                X<g:hitori_quit>
Whether to quit after sending a file to an already open server-side Vim/Neovim.
default is v:true

C<g:hitori_ignore_patterns>                          X<g:hitori_ignore_patterns>
A list of patterns to be ignored. (JavaScript regexp)
default is ["\\.tmp$", "\\.diff$", "(COMMIT_EDIT|TAG_EDIT|MERGE_|SQUASH_)MSG$"]

C<g:hitori_port>                                                X<g:hitori_port>
Websocket server port.
default is 7070

=head1 Example X<hitori-example>

=begin vim

let g:hitori_debug = v:false
let g:hitori_quit = v:false
let g:hitori_port = 7070
let g:hitori_blacklist_patterns = ["\\.tmp$", "\\.diff$", "(COMMIT_EDIT|TAG_EDIT|MERGE_|SQUASH_)MSG$"]

=end vim

=head1 hitori cli command X<hitori-cli>

Before starting Neovim, you can use the `hitori` command to check if the WebSocket server is already running, and if it is, directly send the path of the argument via the WebSocket, otherwise start Neovim.

To use `nvim`, use the following command:                     X<hitori_cli_nvim>

=begin shell

deno install --force --allow-net --allow-run --allow-read --name hitori https://raw.githubusercontent.com/yukimemi/dps-hitori/main/cmd/hitori_nvim.ts

=end shell

To use `nvim-qt`, use the following command:               X<hitori_cli_nvim_qt>

=begin shell

deno install --force --allow-net --allow-run --allow-read --name hitori https://raw.githubusercontent.com/yukimemi/dps-hitori/main/cmd/hitori_nvim-qt.ts

=end shell

To use `neovide`, use the following command:               X<hitori_cli_neovide>

=begin shell

deno install --force --allow-net --allow-run --allow-read --name hitori https://raw.githubusercontent.com/yukimemi/dps-hitori/main/cmd/hitori_neovide.ts

=end shell

=head1 License X<hitori-license>

Licensed under MIT License.

Copyright (c) 2023 yukimemi

=cut
